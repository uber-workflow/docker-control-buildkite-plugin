echo "~~~ post-command test"

echo "BUILDKITE_TRIGGERED_FROM_BUILD_ID $BUILDKITE_TRIGGERED_FROM_BUILD_ID"
echo "BUILDKITE_JOB_ID $BUILDKITE_JOB_ID"
echo "BUILDKITE_JOB_KEY $BUILDKITE_JOB_KEY"
echo "BUILDKITE_JOB_NAME $BUILDKITE_JOB_NAME"
echo "BUILDKITE_STEP_KEY $BUILDKITE_STEP_KEY"
echo "BUILDKITE_LABEL $BUILDKITE_LABEL"
echo "BUILDKITE_COMMAND $BUILDKITE_COMMAND"
echo "BUILDKITE_COMMAND_EXIT_STATUS $BUILDKITE_COMMAND_EXIT_STATUS"

# DO ANALYSIS (or do it in post-command hook)
# TODO: hide behind an optional ANALYZE_JOB=true/false flag (default to false?)
# 1) create the analysis folder & artifacts
set +e # never fail the job because of analysis
mkdir -p artifacts/analysis
mv $BUILDKITE_JOB_ID.log artifacts/analysis/log
echo "$BUILDKITE_COMMAND_EXIT_STATUS" > artifacts/analysis/exit_code

ls -al artifacts/analysis
buildkite-agent artifact upload "artifacts/analysis/**"

# 2) do job analysis
# input: { pipelineSlug, jobKey, analysis } folder
# e.g.: { web-code-runner, lint, analysisFolder }
# output: { category, subCategory }, e.g.: { "category": "InfraFailure", "subCategory": "generic" }
if [ -x tools/analyzers/run.py ]; then
  result=$(python tools/analyzers/run.py --pipeline "$BUILDKITE_PIPELINE_SLUG" --jobKey "$BUILDKITE_STEP_KEY" --artifacts "artifacts/analysis")
fi
cat $result | buildkite-agent meta-data set "JOB_ANALYSIS-$BUILDKITE_JOB_ID"

set -e
